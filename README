Cesium v 0.3:
=============

Dependencies:
-------------

* LLVM 3.1
* Boehm-Demers-Weiser Garbage Collection
* Greg/leg/peg parser library (dependency to be removed in future)

Build:
------

Install LLVM 3.1 and GC.

Update directory paths at the top of the Makefile then type:

make

To run, simply type:

./cs

Introduction:
-------------

Cesium is a language which is to have the following features:

* LLVMJit backend for performance
* Local type inference
* C foreign function interface
* Syntax and expression macros
* Garbage collection
* Imperative and functional styles
* Parameterised types
* Ad hoc and parametric polymorphism

Feature todo list:
------------------

* Parser combinators - written but not used
* Symbol Hash table - done
* Parser - in progress
* Environments - done
* Type system - in progress
* Back end - in progress
* Closures
* Type inference - in progress
* FFI
* Module system
* Macros

Syntax:
-------

Here is the syntax available so far....

* int, uint, float, double, char, string literals
* tuples (expr, ...) and tuple types (type, ...)
* +, -, *, /, %
* <, >, <=, >=, ==, !=
* if (expr) stmt1 else stmt2
* if (expr) stmt
* if (expr) then { stmt1; stmt2; ...; expr1 } else { stmt; ...; expr2 }
* while (expr) stmt
(statements must be terminated with semicolon or may be block statements 
enclosed in braces)
* ident = val;
* tuple = tuple;
* tuple unpacking
* type identifier { identifier : type; ... }
* automatic type constructors, e.g. mytype(1, 2.3)
* slot access mytype.a and assignment
* fn name(identifier : type, ...) : type { stmt1; ...; return expression; }
* fn name(identifier : type, ...) { stmt1; ...; return; }
* function application, e.g. name(1, 2.3)
(functions may be polymorphic)
* a = array[type](len) to create an array
* a[i] to access an array

MUCH more to come.

William Hart 2012
